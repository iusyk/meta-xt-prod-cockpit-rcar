From 488b537362f7c17134067cae4813ee5cccb9af1b Mon Sep 17 00:00:00 2001
From: Ihor Usyk <ihor_usyk@epam.com>
Date: Mon, 12 Jun 2023 14:01:38 +0200
Subject: [PATCH 05/12] rcar: add SCMI reset protocol implementation

Will be used in ATF SCP implementation.

Signed-off-by: Sergiy Kibrik <Sergiy_Kibrik@epam.com>
---
 plat/renesas/common/include/rcar_private.h    |  40 +++
 .../common/include/rcar_scmi_resources.h      |  40 +++
 plat/renesas/rcar/platform.mk                 |   3 +-
 plat/renesas/rcar/rcar_scmi_reset.c           | 239 ++++++++++++++++++
 4 files changed, 321 insertions(+), 1 deletion(-)
 create mode 100644 plat/renesas/common/include/rcar_scmi_resources.h
 create mode 100644 plat/renesas/rcar/rcar_scmi_reset.c

diff --git a/plat/renesas/common/include/rcar_private.h b/plat/renesas/common/include/rcar_private.h
index 36f4ca540..feed21c3a 100644
--- a/plat/renesas/common/include/rcar_private.h
+++ b/plat/renesas/common/include/rcar_private.h
@@ -7,9 +7,11 @@
 #ifndef RCAR_PRIVATE_H
 #define RCAR_PRIVATE_H
 
+#include <assert.h>
 #include <common/bl_common.h>
 #include <lib/bakery_lock.h>
 #include <lib/el3_runtime/cpu_data.h>
+#include <lib/xlat_tables/xlat_tables_defs.h>
 
 #include <platform_def.h>
 
@@ -105,4 +107,42 @@ void rcar_console_boot_end(void);
 void rcar_console_runtime_init(void);
 void rcar_console_runtime_end(void);
 
+#define SCMI_SUCCESS           0
+#define SCMI_NOT_SUPPORTED     (-1)
+#define SCMI_INVALID_PARAMETERS        (-2)
+#define SCMI_DENIED            (-3)
+#define SCMI_NOT_FOUND         (-4)
+#define SCMI_OUT_OF_RANGE      (-5)
+#define SCMI_BUSY              (-6)
+#define SCMI_COMMS_ERROR       (-7)
+#define SCMI_GENERIC_ERROR     (-8)
+#define SCMI_HARDWARE_ERROR    (-9)
+#define SCMI_PROTOCOL_ERROR    (-10)
+
+#define RCAR_SCMI_CHAN_COUNT   (DRAM2_NS_SCMI_SIZE & ~(PAGE_SIZE - 1)) / PAGE_SIZE
+#define SCMI_PROTOCOL_VERSION  0x20000 /* DEN0056C, 4.2.2.1 */
+
+#define FLD(mask, val) (((val) << (__builtin_ffsll(mask) - 1) & (mask)))
+#define FLD_GET(mask, val) (((val) & (mask)) >> (__builtin_ffsll(mask) - 1))
+
+typedef uint16_t scmi_perm_t;
+
+_Static_assert(sizeof(scmi_perm_t) * 8 == RCAR_SCMI_CHAN_COUNT);
+
+struct scmi_reset {
+       uint16_t rst_reg;
+       uint16_t clr_reg;
+       uint8_t bit_off;
+       scmi_perm_t perm;
+};
+
+static inline bool scmi_permission_granted(scmi_perm_t perm, uint32_t channel)
+{
+       assert(channel < RCAR_SCMI_CHAN_COUNT);
+       return perm & (1 << channel);
+}
+
+uint32_t rcar_scmi_handle_reset(size_t, uint8_t, volatile uint8_t*, size_t);
+void rcar_reset_reset(uint32_t);
+
 #endif /* RCAR_PRIVATE_H */
diff --git a/plat/renesas/common/include/rcar_scmi_resources.h b/plat/renesas/common/include/rcar_scmi_resources.h
new file mode 100644
index 000000000..f001788e0
--- /dev/null
+++ b/plat/renesas/common/include/rcar_scmi_resources.h
@@ -0,0 +1,40 @@
+/*
+ * Copyright (c) 2021 EPAM Systems Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ *
+ * Redistributions of source code must retain the above copyright notice, this
+ * list of conditions and the following disclaimer.
+ *
+ * Redistributions in binary form must reproduce the above copyright notice,
+ * this list of conditions and the following disclaimer in the documentation
+ * and/or other materials provided with the distribution. 
+ * 
+ * Neither the name of ARM nor the names of its contributors may be used 
+ * to endorse or promote products derived from this software without specific 
+ * prior written permission. 
+ * 
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE 
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
+ * POSSIBILITY OF SUCH DAMAGE.                                                                       
+ */                                                                                                  
+
+#ifndef RCAR_SCMI_RESOURCES_H
+#define RCAR_SCMI_RESOURCES_H
+
+enum rcar_scmi_rst_offset {
+       RCAR_SCMIRST_MAX
+};
+
+extern struct scmi_reset rcar_resets[RCAR_SCMIRST_MAX];
+
+#endif /* RCAR_SCMI_RESOURCES_H */
diff --git a/plat/renesas/rcar/platform.mk b/plat/renesas/rcar/platform.mk
index 7c90b8a8a..93fbd0d84 100644
--- a/plat/renesas/rcar/platform.mk
+++ b/plat/renesas/rcar/platform.mk
@@ -330,7 +330,8 @@ BL31_CFLAGS	+=	-fno-stack-protector
 endif
 
 ifeq (${RCAR_GEN3_ULCB},1)
-BL31_SOURCES		+=	drivers/renesas/rcar/cpld/ulcb_cpld.c
+BL31_SOURCES		+=	drivers/renesas/rcar/cpld/ulcb_cpld.c \
+				plat/renesas/rcar/rcar_scmi_reset.c
 endif
 
 # build the layout images for the bootrom and the necessary srecords
diff --git a/plat/renesas/rcar/rcar_scmi_reset.c b/plat/renesas/rcar/rcar_scmi_reset.c
new file mode 100644
index 000000000..9947207e6
--- /dev/null
+++ b/plat/renesas/rcar/rcar_scmi_reset.c
@@ -0,0 +1,239 @@
+/*
+ * Copyright (c) 2021 EPAM Systems Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ *
+ * Redistributions of source code must retain the above copyright notice, this
+ * list of conditions and the following disclaimer.
+ *
+ * Redistributions in binary form must reproduce the above copyright notice,
+ * this list of conditions and the following disclaimer in the documentation
+ * and/or other materials provided with the distribution.
+ *
+ * Neither the name of ARM nor the names of its contributors may be used
+ * to endorse or promote products derived from this software without specific
+ * prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include <assert.h>
+#include <lib/mmio.h>
+
+#include "micro_delay.h"
+#include "rcar_private.h"
+#include "rcar_scmi_resources.h"
+
+#define CPG_BASE U(0xE6150000)
+
+struct scmi_reset rcar_resets[RCAR_SCMIRST_MAX] = {
+};
+
+enum scmi_message_id {
+       PROTOCOL_VERSION = 0x0,
+       PROTOCOL_ATTRIBUTES,
+       PROTOCOL_MESSAGE_ATTRIBUTES,
+       RESET_DOMAIN_ATTRIBUTES,
+       RESET,
+       RESET_NOTIFY,
+       SCMI_LAST_ID
+};
+
+static void rcar_assert_domain(uint32_t domain)
+{
+       assert(domain < ARRAY_SIZE(rcar_resets));
+       mmio_write_32(CPG_BASE + rcar_resets[domain].rst_reg,
+                     BIT(rcar_resets[domain].bit_off));
+}
+
+static void rcar_deassert_domain(uint32_t domain)
+{
+       assert(domain < ARRAY_SIZE(rcar_resets));
+       mmio_write_32(CPG_BASE + rcar_resets[domain].clr_reg,
+                     BIT(rcar_resets[domain].bit_off));
+}
+
+static void rcar_auto_domain(uint32_t domain)
+{
+       rcar_assert_domain(domain);
+       rcar_micro_delay(35);
+       rcar_deassert_domain(domain);
+}
+
+static uint32_t protocol_version(size_t channel __unused,
+                                volatile uint8_t *param,
+                                size_t size __unused)
+{
+       int32_t *status = (int32_t*)param;
+       uint32_t *version = (uint32_t*)(param + sizeof(*status));
+       *status = SCMI_SUCCESS;
+       *version = SCMI_PROTOCOL_VERSION;
+       return sizeof(*status) + sizeof(*version);
+}
+
+static uint32_t protocol_attrs(size_t channel __unused,
+                              volatile uint8_t *param,
+                              size_t size __unused)
+{
+       int32_t *status = (int32_t*)param;
+       uint32_t *attrs = (uint32_t*)(param + sizeof(*status));
+
+       *status = SCMI_SUCCESS;
+       *attrs = FLD(GENMASK(31, 16), 0) |
+                FLD(GENMASK(15,  0), RCAR_SCMIRST_MAX);
+
+       return sizeof(*status) + sizeof(*attrs);
+}
+
+static uint32_t protocol_msg_attrs(size_t channel __unused,
+                                  volatile uint8_t *param,
+                                  size_t size)
+{
+       uint32_t id = *(uint32_t*)param;
+       int32_t *status = (int32_t*)param;
+       uint32_t *attrs = (uint32_t*)(param + sizeof(*status));
+
+       if (size != sizeof(id)) {
+               *status = SCMI_PROTOCOL_ERROR;
+               return sizeof(*status);
+       }
+
+       /* RESET_NOTIFY not supported in synchronous SCP implementation */
+       if (id == RESET_NOTIFY) {
+               *status = SCMI_NOT_FOUND;
+       } else {
+               *status = SCMI_SUCCESS;
+       }
+
+       *attrs = 0x0;
+
+       return sizeof(*status) + sizeof(*attrs);
+}
+
+static uint32_t reset_attrs(size_t channel __unused,
+                           volatile uint8_t *param,
+                           size_t size)
+{
+       struct rst_discovery {
+               int32_t status;
+               uint32_t attributes;
+               uint32_t latency;
+               char name[16];
+       } *res = (struct rst_discovery*)param;
+       uint32_t domain_id = *(uint32_t*)param;
+
+       if (size != sizeof(domain_id)) {
+               res->status = SCMI_PROTOCOL_ERROR;
+               return sizeof(res->status);
+       }
+
+       if (domain_id >= RCAR_SCMIRST_MAX) {
+               res->status = SCMI_NOT_FOUND;
+               return sizeof(res->status);
+       }
+
+       memset(res->name, 0, sizeof(res->name));
+
+       /* synchronous SCP implementation */
+       res->attributes = 0;
+       res->latency = 0xFFFFFFFF;
+
+       res->status = SCMI_SUCCESS;
+
+       return sizeof(*res);
+}
+
+static uint32_t reset(size_t channel,
+                     volatile uint8_t *payload,
+                     size_t size)
+{
+       struct parameters {
+               uint32_t id;
+               uint32_t flags;
+               uint32_t state;
+       } param = *((struct parameters*)payload);
+       int32_t status;
+
+       if (size != sizeof(param)) {
+               status = SCMI_PROTOCOL_ERROR;
+               goto error;
+       }
+
+       if (param.id >= RCAR_SCMIRST_MAX) {
+               status = SCMI_NOT_FOUND;
+               goto error;
+       }
+
+       if (param.flags & GENMASK(31,2)) {
+               /* synchronous SCP implementation */
+               status = SCMI_INVALID_PARAMETERS;
+               goto error;
+       }
+
+       if (!scmi_permission_granted(rcar_resets[param.id].perm, channel)) {
+               status = SCMI_DENIED;
+               goto error;
+       }
+
+       if (param.flags & BIT(0)) {
+               rcar_auto_domain(param.id);
+       } else if (param.flags & BIT(1)) {
+               rcar_assert_domain(param.id);
+       } else {
+               rcar_deassert_domain(param.id);
+       }
+
+       status = SCMI_SUCCESS;
+error:
+       *(int32_t *)payload = status;
+       return sizeof(status);
+}
+
+static uint32_t reset_notify(size_t channel __unused,
+                                  volatile uint8_t *param,
+                                  size_t size)
+{
+       *(int32_t *)param = SCMI_NOT_SUPPORTED;
+       return sizeof(int32_t);
+}
+
+typedef uint32_t (*reset_handler_t)(size_t, volatile uint8_t*,size_t);
+
+static reset_handler_t reset_handlers[SCMI_LAST_ID] = {
+       [PROTOCOL_VERSION] = protocol_version,
+       [PROTOCOL_ATTRIBUTES] = protocol_attrs,
+       [PROTOCOL_MESSAGE_ATTRIBUTES] = protocol_msg_attrs,
+       [RESET_DOMAIN_ATTRIBUTES] = reset_attrs,
+       [RESET] = reset,
+       [RESET_NOTIFY] = reset_notify,
+};
+
+uint32_t rcar_scmi_handle_reset(size_t channel, uint8_t cmd,
+                              volatile uint8_t *param, size_t size)
+{      if (cmd >= SCMI_LAST_ID) {
+               *(int32_t *)param = SCMI_NOT_SUPPORTED;
+               return sizeof(int32_t);
+       }
+
+       assert(reset_handlers[cmd] != NULL);
+
+       return reset_handlers[cmd](channel, param, size);
+}
+
+void rcar_reset_reset(uint32_t domain_id)
+{
+       assert(domain_id < RCAR_SCMIRST_MAX);
+       rcar_auto_domain(domain_id);
+}
+
-- 
2.25.1

