From 9940e0bf05cbaca49ea3d56e2d2f146e04a35be4 Mon Sep 17 00:00:00 2001
From: Ihor Usyk <ihor_usyk@epam.com>
Date: Mon, 12 Jun 2023 17:02:18 +0200
Subject: [PATCH 09/12] rcar: SCMI base protocol implementation and handling

Add SCMI base procol commands handling.

Signed-off-by: Sergiy Kibrik <Sergiy_Kibrik@epam.com>
Signed-off-by: Ihor Usyk <ihor.usyk@gmail.com>
---
 plat/renesas/common/include/rcar_private.h    |  12 +
 .../common/include/rcar_scmi_resources.h      |   5 +
 plat/renesas/common/include/rcar_sip_svc.h    |   5 +-
 plat/renesas/rcar/platform.mk                 |   3 +
 plat/renesas/rcar/rcar_scmi.c                 | 136 ++++++
 plat/renesas/rcar/rcar_scmi_base.c            | 426 ++++++++++++++++++
 plat/renesas/rcar/rcar_scmi_devices.c         |  41 ++
 plat/renesas/rcar/rcar_sip_svc.c              |  12 +-
 8 files changed, 638 insertions(+), 2 deletions(-)
 create mode 100644 plat/renesas/rcar/rcar_scmi.c
 create mode 100644 plat/renesas/rcar/rcar_scmi_base.c
 create mode 100644 plat/renesas/rcar/rcar_scmi_devices.c

diff --git a/plat/renesas/common/include/rcar_private.h b/plat/renesas/common/include/rcar_private.h
index 1e57dc60f..a6a08253a 100644
--- a/plat/renesas/common/include/rcar_private.h
+++ b/plat/renesas/common/include/rcar_private.h
@@ -107,7 +107,10 @@ void rcar_console_boot_end(void);
 void rcar_console_runtime_init(void);
 void rcar_console_runtime_end(void);
 
+uint32_t rcar_trigger_scmi(size_t);
+int rcar_setup_scmi(void);
 int rcar_cpg_init(void);
+uint32_t scmi_count_protocols(void);
 
 #define SCMI_SUCCESS           0
 #define SCMI_NOT_SUPPORTED     (-1)
@@ -127,12 +130,20 @@ int rcar_cpg_init(void);
 #define FLD(mask, val) (((val) << (__builtin_ffsll(mask) - 1) & (mask)))
 #define FLD_GET(mask, val) (((val) & (mask)) >> (__builtin_ffsll(mask) - 1))
 
+#define channel_to_agent(channel) ((channel) + 1)
+#define agent_to_channel(agent) ((agent) - 1)
+
 typedef uint16_t scmi_umask_t;
 
 _Static_assert(sizeof(scmi_umask_t) * 8 == RCAR_SCMI_CHAN_COUNT);
 
 typedef scmi_umask_t scmi_perm_t;
 
+struct scmi_device {
+       int *rsts;
+       int *clks;
+};
+
 struct scmi_reset {
        uint16_t rst_reg;
        uint16_t clr_reg;
@@ -174,6 +185,7 @@ static inline bool scmi_permission_granted(scmi_perm_t perm, uint32_t channel)
        return perm & (1 << channel);
 }
 
+uint32_t rcar_scmi_handle_base(size_t, uint8_t, volatile uint8_t*, size_t);
 uint32_t rcar_scmi_handle_power(size_t, uint8_t, volatile uint8_t*, size_t);
 uint32_t rcar_scmi_handle_clock(size_t, uint8_t, volatile uint8_t*, size_t);
 uint32_t rcar_scmi_handle_reset(size_t, uint8_t, volatile uint8_t*, size_t);
diff --git a/plat/renesas/common/include/rcar_scmi_resources.h b/plat/renesas/common/include/rcar_scmi_resources.h
index 85219512c..8cd3611e4 100644
--- a/plat/renesas/common/include/rcar_scmi_resources.h
+++ b/plat/renesas/common/include/rcar_scmi_resources.h
@@ -31,6 +31,10 @@
 #ifndef RCAR_SCMI_RESOURCES_H
 #define RCAR_SCMI_RESOURCES_H
 
+enum rcar_scmi_devid {
+       RCAR_SCMIDEV_MAX
+};
+
 enum rcar_scmi_rst_offset {
        RCAR_SCMIRST_MAX
 };
@@ -40,6 +44,7 @@ enum rcar_scmi_clk {
        RCAR_SCMICLK_MAX = RCAR_CLK_MAX /* end of SCMI exported clocks */
 };
 
+extern const struct scmi_device rcar_devices[RCAR_SCMIDEV_MAX];
 extern struct scmi_clk rcar_clocks[RCAR_CLK_MAX];
 extern struct scmi_reset rcar_resets[RCAR_SCMIRST_MAX];
 
diff --git a/plat/renesas/common/include/rcar_sip_svc.h b/plat/renesas/common/include/rcar_sip_svc.h
index d9cd173d0..e676a16db 100644
--- a/plat/renesas/common/include/rcar_sip_svc.h
+++ b/plat/renesas/common/include/rcar_sip_svc.h
@@ -18,6 +18,9 @@
 /* Function ID to get the Board type */
 #define RCAR_SIP_SVC_GET_BOARD_TYPE	U(0x82000001)
 
+/* SCMI doorbell */
+#define RCAR_SIP_SVC_MBOX_TRIGGER      U(0x82000002)
+
 /* Rcar SiP Service Calls version numbers */
 #define RCAR_SIP_SVC_VERSION_MAJOR	U(0x0)
 #define RCAR_SIP_SVC_VERSION_MINOR	U(0x2)
@@ -30,4 +33,4 @@
 #define RCAR_SMC_RET_PMIC_DISABLE	-3
 
 
-#endif /* RCAR_SIP_SVC_H__ */
\ No newline at end of file
+#endif /* RCAR_SIP_SVC_H__ */
diff --git a/plat/renesas/rcar/platform.mk b/plat/renesas/rcar/platform.mk
index 7b3c20c2d..75d2aead9 100644
--- a/plat/renesas/rcar/platform.mk
+++ b/plat/renesas/rcar/platform.mk
@@ -331,6 +331,9 @@ endif
 
 ifeq (${RCAR_GEN3_ULCB},1)
 BL31_SOURCES		+=	drivers/renesas/rcar/cpld/ulcb_cpld.c \
+                                plat/renesas/rcar/rcar_scmi.c         \
+                                plat/renesas/rcar/rcar_scmi_base.c    \
+                                plat/renesas/rcar/rcar_scmi_devices.c \
 				plat/renesas/rcar/rcar_scmi_power.c   \
 				plat/renesas/rcar/rcar_scmi_reset.c   \
 				plat/renesas/rcar/rcar_scmi_clocks.c  \
diff --git a/plat/renesas/rcar/rcar_scmi.c b/plat/renesas/rcar/rcar_scmi.c
new file mode 100644
index 000000000..5995161c2
--- /dev/null
+++ b/plat/renesas/rcar/rcar_scmi.c
@@ -0,0 +1,136 @@
+/*
+ * Copyright (c) 2016,2017 ARM Limited and Contributors. All rights reserved.
+ * Copyright (c) 2017,2021 EPAM Systems Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ *
+ * Redistributions of source code must retain the above copyright notice, this
+ * list of conditions and the following disclaimer.
+ *
+ * Redistributions in binary form must reproduce the above copyright notice,
+ * this list of conditions and the following disclaimer in the documentation
+ * and/or other materials provided with the distribution.
+ *
+ * Neither the name of ARM nor the names of its contributors may be used
+ * to endorse or promote products derived from this software without specific
+ * prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include <assert.h>
+#include <common/debug.h>
+#include <lib/mmio.h>
+#include <lib/smccc.h>
+
+#include "rcar_def.h"
+#include "rcar_private.h"
+
+#define RCAR_SCMI_SHMEM_BASE	DRAM2_NS_SCMI_BASE /* va == pa */
+
+enum scmi_protocol_id {
+	SCMI_BASE_PROTO  = 0x10,
+	SCMI_POWER_PROTO = 0x11,
+	SCMI_CLOCK_PROTO = 0x14,
+	SCMI_RESET_PROTO = 0x16,
+	SCMI_LAST_PROTO
+};
+
+typedef volatile struct scmi_shared_mem {
+	 uint32_t reserved;
+	 uint32_t channel_status;
+	 uint32_t reserved1[2];
+	 uint32_t flags;
+	 uint32_t length;
+	 uint32_t msg_header;
+	 uint8_t msg_payload[];
+} scmi_shmem_t;
+
+static uint32_t scmi_handle_default(size_t channel __unused,
+				    uint8_t cmd __unused,
+				    volatile uint8_t *param,
+				    size_t size __unused)
+{
+	*(int32_t *)param = SCMI_NOT_SUPPORTED;
+	return sizeof(int32_t);
+}
+
+typedef uint32_t (*proto_handler_t)(size_t,uint8_t,volatile uint8_t*,size_t);
+
+static proto_handler_t proto_handlers[SCMI_LAST_PROTO] = {
+	[0 ... SCMI_LAST_PROTO - 1] = scmi_handle_default,
+	[SCMI_BASE_PROTO]  = rcar_scmi_handle_base,
+	[SCMI_POWER_PROTO]  = rcar_scmi_handle_power,
+	[SCMI_CLOCK_PROTO] = rcar_scmi_handle_clock,
+	[SCMI_RESET_PROTO] = rcar_scmi_handle_reset,
+};
+
+static uint32_t scmi_handle_cmd(size_t ch, uint8_t protocol, uint8_t cmd,
+				volatile uint8_t *payload,
+				size_t payload_size)
+{
+	if (protocol < ARRAY_SIZE(proto_handlers)) {
+		return proto_handlers[protocol](ch, cmd, payload, payload_size);
+	}
+
+	*(int32_t *)payload = SCMI_NOT_SUPPORTED;
+	return sizeof(int32_t);
+}
+
+uint32_t scmi_count_protocols(void)
+{
+	uint32_t count = 0;
+	for (int i = 0; i < ARRAY_SIZE(proto_handlers); i++) {
+		if (proto_handlers[i] != scmi_handle_default) {
+			count++;
+		}
+	}
+	return count;
+}
+
+int rcar_setup_scmi(void)
+{
+	return rcar_cpg_init();
+}
+
+uint32_t rcar_trigger_scmi(size_t chan_id)
+{
+	scmi_shmem_t *shmem;
+	size_t payload_size;
+	uint8_t protocol_id, message_id;
+
+	if (chan_id >= RCAR_SCMI_CHAN_COUNT) {
+		return SMC_ARCH_CALL_INVAL_PARAM;
+	}
+
+	shmem = (struct scmi_shared_mem *)
+		(RCAR_SCMI_SHMEM_BASE + chan_id * PAGE_SIZE);
+	payload_size = MAX(sizeof(shmem->msg_header),(size_t)shmem->length);
+	payload_size -= sizeof(shmem->msg_header);
+	protocol_id = FLD_GET(GENMASK(17,10), shmem->msg_header);
+	message_id = FLD_GET(GENMASK(7,0), shmem->msg_header);
+
+	VERBOSE("BL31-SCMI: channel: 0x%lx, protocol: 0x%x, command: 0x%x\n",
+		chan_id, protocol_id, message_id);
+
+	shmem->length = scmi_handle_cmd(chan_id, protocol_id, message_id,
+					shmem->msg_payload, payload_size);
+
+	assert(shmem->length + sizeof(*shmem) < PAGE_SIZE);
+	shmem->length += sizeof(shmem->msg_header);
+	shmem->channel_status = BIT(0); /* mark free */
+	flush_dcache_range((uintptr_t)shmem, sizeof(*shmem) + shmem->length);
+
+	return SMC_ARCH_CALL_SUCCESS;
+}
diff --git a/plat/renesas/rcar/rcar_scmi_base.c b/plat/renesas/rcar/rcar_scmi_base.c
new file mode 100644
index 000000000..1ba01fa4d
--- /dev/null
+++ b/plat/renesas/rcar/rcar_scmi_base.c
@@ -0,0 +1,426 @@
+/*
+ * Copyright (c) 2021 EPAM Systems Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ *
+ * Redistributions of source code must retain the above copyright notice, this
+ * list of conditions and the following disclaimer.
+ *
+ * Redistributions in binary form must reproduce the above copyright notice,
+ * this list of conditions and the following disclaimer in the documentation
+ * and/or other materials provided with the distribution.
+ *
+ * Neither the name of ARM nor the names of its contributors may be used
+ * to endorse or promote products derived from this software without specific
+ * prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include <assert.h>
+#include <common/debug.h>
+
+#include "rcar_def.h"
+#include "rcar_private.h"
+#include "rcar_scmi_resources.h"
+
+enum scmi_message_id {
+	PROTOCOL_VERSION = 0x0,
+	PROTOCOL_ATTRIBUTES,
+	PROTOCOL_MESSAGE_ATTRIBUTES,
+	BASE_DISCOVER_VENDOR,
+	BASE_DISCOVER_SUB_VENDOR,
+	BASE_DISCOVER_IMPLEMENTATION_VERSION,
+	BASE_DISCOVER_LIST_PROTOCOLS,
+	BASE_DISCOVER_AGENT,
+	BASE_NOTIFY_ERRORS,
+	BASE_SET_DEVICE_PERMISSIONS,
+	BASE_SET_PROTOCOL_PERMISSIONS,
+	BASE_RESET_AGENT_CONFIGURATION,
+	SCMI_LAST_ID
+};
+
+static uint32_t protocol_version(size_t channel __unused,
+				 volatile uint8_t *param,
+				 size_t size __unused)
+{
+	int32_t *status = (int32_t*)param;
+	uint32_t *version = (uint32_t*)(param + sizeof(*status));
+	*status = SCMI_SUCCESS;
+	*version = SCMI_PROTOCOL_VERSION;
+	return sizeof(*status) + sizeof(*version);
+}
+
+static uint32_t protocol_attrs(size_t channel __unused,
+			       volatile uint8_t *param,
+			       size_t size __unused)
+{
+	int32_t *status = (int32_t*)param;
+	uint32_t *attrs = (uint32_t*)(param + sizeof(*status));
+	uint32_t num_proto = scmi_count_protocols();
+
+	*status = SCMI_SUCCESS;
+	*attrs = FLD(GENMASK(31, 16), 0) |
+		 FLD(GENMASK(15, 8), RCAR_SCMI_CHAN_COUNT) |
+		 FLD(GENMASK(7,  0), num_proto);
+
+	return sizeof(*status) + sizeof(*attrs);
+}
+
+static uint32_t protocol_msg_attrs(size_t channel __unused,
+				   volatile uint8_t *param,
+				   size_t size)
+{
+	uint32_t id = *(uint32_t*)param;
+	int32_t *status = (int32_t*)param;
+	uint32_t *attrs = (uint32_t*)(param + sizeof(*status));
+
+	if (size != sizeof(id)) {
+		*status = SCMI_PROTOCOL_ERROR;
+		return sizeof(*status);
+	}
+
+	/* BASE_NOTIFY_ERRORS not supported in synchronous SCP implementation
+	 * BASE_SET_PROTOCOL_PERMISSIONS not implemented yet
+	*/
+	if (id == BASE_NOTIFY_ERRORS || id == BASE_SET_PROTOCOL_PERMISSIONS) {
+		*status = SCMI_NOT_FOUND;
+	} else {
+		*status = SCMI_SUCCESS;
+	}
+
+	*attrs = 0x0;
+
+	return sizeof(*status) + sizeof(*attrs);
+}
+
+static uint32_t __copy_vendor_str(volatile uint8_t *param,
+				  const char src[], size_t len)
+{
+	struct vendor {
+		int32_t status;
+		char name[16];
+	} *res = (struct vendor*)param;
+
+	assert(len <= sizeof(res->name));
+
+	strlcpy(res->name, src, len);
+	res->status = SCMI_SUCCESS;
+
+	return sizeof(*res);
+}
+
+static uint32_t get_vendor(size_t channel __unused,
+			   volatile uint8_t *param,
+			   size_t size __unused)
+{
+	return __copy_vendor_str(param, "ATF\0", 4);
+}
+
+static uint32_t get_sub_vendor(size_t channel __unused,
+			       volatile uint8_t *param,
+			       size_t size __unused)
+{
+	return __copy_vendor_str(param, "R-Car\0", 6);
+}
+
+static uint32_t impl_version(size_t channel __unused,
+			     volatile uint8_t *param,
+			     size_t size __unused)
+{
+	int32_t *status = (int32_t*)param;
+	uint32_t *version = (uint32_t*)(param + sizeof(*status));
+	*status = SCMI_SUCCESS;
+	*version = 0x1001;
+	return sizeof(*status) + sizeof(*version);
+}
+
+static uint32_t get_protocols(size_t channel __unused,
+			      volatile uint8_t *param,
+			      size_t size)
+{
+	struct protocols_response {
+		int32_t status;
+		uint32_t num_protocols;
+		uint32_t protocols;
+	} *res = (struct protocols_response*)param;
+	uint32_t skip = *(uint32_t*)param;
+
+	if (size != sizeof(skip)) {
+		res->status = SCMI_PROTOCOL_ERROR;
+		return sizeof(res->status);
+	}
+
+	if (skip != 0) {
+		res->status = SCMI_INVALID_PARAMETERS;
+		return sizeof(res->status);
+	}
+
+	res->status = SCMI_SUCCESS;
+	res->num_protocols = scmi_count_protocols();
+	/*FIXME: get supported protocols from rcar_scmi.c */
+	res->protocols = FLD(GENMASK(23,16), 0x11) |
+			 FLD(GENMASK(15,8), 0x14)  |
+			 FLD(GENMASK(7,0), 0x16);
+
+	return sizeof(*res);
+}
+
+static uint32_t get_agent(size_t channel, volatile uint8_t *param, size_t size)
+{
+	struct agent_discovery {
+		int32_t status;
+		uint32_t agent_id;
+		char name[16];
+	} *res = (struct agent_discovery*)param;
+	uint32_t agent_id = *(uint32_t*)param;
+
+	if (size != sizeof(agent_id)) {
+		res->status = SCMI_PROTOCOL_ERROR;
+		return sizeof(res->status);
+	}
+
+	if (agent_id == 0xFFFFFFFF) {
+		agent_id = channel_to_agent(channel);
+	}
+
+	switch (agent_id) {
+	case 0:
+		strlcpy(res->name, "platform ATF", sizeof(res->name));
+		break;
+	case 1:
+		strlcpy(res->name, "HYP", sizeof(res->name));
+		break;
+	case 2 ... RCAR_SCMI_CHAN_COUNT:
+		snprintf(res->name, sizeof(res->name), "VM%u", agent_id - 2);
+		break;
+	default:
+		res->status = SCMI_NOT_FOUND;
+		return sizeof(res->status);
+	}
+
+	res->agent_id = agent_id;
+	res->status = SCMI_SUCCESS;
+
+	return sizeof(*res);
+}
+
+static uint32_t notify_errors(size_t channel __unused,
+			      volatile uint8_t *param,
+			      size_t size __unused)
+{
+	*(int32_t *)param = SCMI_NOT_SUPPORTED;
+	return sizeof(int32_t);
+}
+
+static inline void __set_perm(scmi_perm_t *perm, uint32_t agent_id, bool permit)
+{
+	scmi_perm_t mask = 1 << agent_to_channel(agent_id);
+	if (permit) {
+		*perm |= mask;
+	} else {
+		*perm &= ~mask;
+	}
+}
+
+static inline void __scmi_permit(scmi_perm_t *perm, uint32_t agent_id)
+{
+	__set_perm(perm, agent_id, true);
+}
+
+static inline void __scmi_deny(scmi_perm_t *perm, uint32_t agent_id)
+{
+	__set_perm(perm, agent_id, false);
+}
+
+static inline void __mangle_dev_perm(uint32_t agent_id, uint32_t dev_id,
+				  void (*fn)(scmi_perm_t*, uint32_t))
+{
+#define MANGLE(attr, devs) {\
+	int *index = rcar_devices[dev_id].attr; \
+	while (index && *index >= 0) { \
+		fn(&devs[*index++].perm, agent_id); \
+	} \
+}
+	assert(dev_id < RCAR_SCMIDEV_MAX);
+	assert(agent_id <= RCAR_SCMI_CHAN_COUNT);
+	MANGLE(rsts, rcar_resets);
+	MANGLE(clks, rcar_clocks);
+#undef MANGLE
+}
+
+static inline void scmi_permit(uint32_t agent_id, uint32_t dev_id)
+{
+	__mangle_dev_perm(agent_id, dev_id, __scmi_permit);
+}
+
+static inline void scmi_deny(uint32_t agent_id, uint32_t dev_id)
+{
+	__mangle_dev_perm(agent_id, dev_id, __scmi_deny);
+}
+
+static inline void scmi_drop_permissions(uint32_t agent_id)
+{
+	assert(agent_id <= RCAR_SCMI_CHAN_COUNT);
+	for (uint32_t dev_id = 0; dev_id < RCAR_SCMIDEV_MAX; dev_id++) {
+		scmi_deny(agent_id, dev_id);
+	}
+}
+
+static uint32_t set_dev_perm(size_t channel,
+			     volatile uint8_t *payload,
+			     size_t size)
+{
+	struct parameters {
+		uint32_t agent_id;
+		uint32_t device_id;
+		uint32_t flags;
+	} param = *((struct parameters*)payload);
+	int32_t status;
+
+	if (channel != 0) {
+		status = SCMI_DENIED;
+		goto error;
+	}
+
+	if (size != sizeof(param)) {
+		status = SCMI_PROTOCOL_ERROR;
+		goto error;
+	}
+
+	if (param.agent_id > RCAR_SCMI_CHAN_COUNT ||
+	    param.device_id >= RCAR_SCMIDEV_MAX)
+	{
+		status = SCMI_NOT_FOUND;
+		goto error;
+	}
+
+	if (param.flags & ~0x1) {
+		status = SCMI_INVALID_PARAMETERS;
+		goto error;
+	}
+
+
+	if (param.flags & 0x1) {
+		scmi_permit(param.agent_id, param.device_id);
+	} else {
+		scmi_deny(param.agent_id, param.device_id);
+	}
+
+	status = SCMI_SUCCESS;
+error:
+	*(int32_t *)payload = status;
+	return sizeof(status);
+}
+
+/* Not implemented yet */
+static uint32_t set_protocol_perm(size_t channel __unused,
+			      volatile uint8_t *param,
+			      size_t size __unused)
+{
+	*(int32_t *)param = SCMI_NOT_SUPPORTED;
+	return sizeof(int32_t);
+}
+
+static void reset_agent_resources(uint32_t agent_id)
+{
+	uint32_t channel = agent_to_channel(agent_id);
+	for (uint32_t id = 0; id < RCAR_SCMICLK_MAX; id++) {
+		struct scmi_clk *sclk = &rcar_clocks[id];
+		if (!scmi_permission_granted(sclk->perm, channel)) {
+			continue;
+		}
+		rcar_reset_clock(id, agent_id);
+	}
+
+	for (uint32_t id = 0; id < RCAR_SCMIRST_MAX; id++) {
+		struct scmi_reset *rst = &rcar_resets[id];
+		if (!scmi_permission_granted(rst->perm, channel)) {
+			continue;
+		}
+		rcar_reset_reset(id);
+	}
+}
+
+static uint32_t reset_agent(size_t channel,
+			     volatile uint8_t *param,
+			     size_t size)
+{
+	uint32_t agent_id = *(uint32_t*)param;
+	uint32_t flags = *(uint32_t*)(param + sizeof(agent_id));
+	int32_t status;
+
+	if (size != sizeof(agent_id) + sizeof(flags)) {
+		status = SCMI_PROTOCOL_ERROR;
+		goto error;
+	}
+
+	if (agent_id > RCAR_SCMI_CHAN_COUNT) {
+		status = SCMI_NOT_FOUND;
+		goto error;
+	}
+
+	if (agent_id != channel_to_agent(channel) && channel != 0) {
+		status = SCMI_DENIED;
+		goto error;
+
+	}
+
+	if (flags & ~0x1) {
+		status = SCMI_INVALID_PARAMETERS;
+		goto error;
+	}
+
+	reset_agent_resources(agent_id);
+
+	/* check if need to reset access permissions */
+	if (flags & 0x1) {
+		scmi_drop_permissions(agent_id);
+	}
+
+	status = SCMI_SUCCESS;
+error:
+	*(int32_t *)param = status;
+	return sizeof(status);
+}
+
+typedef uint32_t (*base_handler_t)(size_t, volatile uint8_t*,size_t);
+
+static base_handler_t base_handlers[SCMI_LAST_ID] = {
+	[PROTOCOL_VERSION] = protocol_version,
+	[PROTOCOL_ATTRIBUTES] = protocol_attrs,
+	[PROTOCOL_MESSAGE_ATTRIBUTES] = protocol_msg_attrs,
+	[BASE_DISCOVER_VENDOR] = get_vendor,
+	[BASE_DISCOVER_SUB_VENDOR] = get_sub_vendor,
+	[BASE_DISCOVER_IMPLEMENTATION_VERSION] = impl_version,
+	[BASE_DISCOVER_LIST_PROTOCOLS] = get_protocols,
+	[BASE_DISCOVER_AGENT] = get_agent,
+	[BASE_NOTIFY_ERRORS] = notify_errors,
+	[BASE_SET_DEVICE_PERMISSIONS] = set_dev_perm,
+	[BASE_SET_PROTOCOL_PERMISSIONS] = set_protocol_perm,
+	[BASE_RESET_AGENT_CONFIGURATION] = reset_agent,
+};
+
+uint32_t rcar_scmi_handle_base(size_t channel, uint8_t cmd,
+			       volatile uint8_t *param, size_t size)
+{
+	if (cmd >= SCMI_LAST_ID) {
+		*(int32_t *)param = SCMI_NOT_SUPPORTED;
+		return sizeof(int32_t);
+	}
+
+	assert(base_handlers[cmd] != NULL);
+
+	return base_handlers[cmd](channel, param, size);
+}
diff --git a/plat/renesas/rcar/rcar_scmi_devices.c b/plat/renesas/rcar/rcar_scmi_devices.c
new file mode 100644
index 000000000..c63b7fe67
--- /dev/null
+++ b/plat/renesas/rcar/rcar_scmi_devices.c
@@ -0,0 +1,41 @@
+/*
+ * Copyright (c) 2021 EPAM Systems Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ *
+ * Redistributions of source code must retain the above copyright notice, this
+ * list of conditions and the following disclaimer.
+ *
+ * Redistributions in binary form must reproduce the above copyright notice,
+ * this list of conditions and the following disclaimer in the documentation
+ * and/or other materials provided with the distribution.
+ *
+ * Neither the name of ARM nor the names of its contributors may be used
+ * to endorse or promote products derived from this software without specific
+ * prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include "rcar_private.h"
+#include "rcar_scmi_resources.h"
+
+static const struct scmi_device default_dev = {
+		.rsts = (int[]){-1},
+		.clks = (int[]){-1},
+};
+
+const struct scmi_device rcar_devices[RCAR_SCMIDEV_MAX] = {
+	[0 ... RCAR_SCMIDEV_MAX - 1] = default_dev, /* sentinel */
+};
diff --git a/plat/renesas/rcar/rcar_sip_svc.c b/plat/renesas/rcar/rcar_sip_svc.c
index 1c9884065..da802bafa 100644
--- a/plat/renesas/rcar/rcar_sip_svc.c
+++ b/plat/renesas/rcar/rcar_sip_svc.c
@@ -10,6 +10,12 @@
 #include <common/debug.h>
 #include <rcar_sip_svc.h>
 #include "board.h"
+#include "rcar_private.h"
+
+static int rcar_sip_setup(void)
+{
+	return rcar_setup_scmi();
+}
 
 /*
  * This function handles Rcar defined SiP Calls
@@ -36,6 +42,10 @@ static uintptr_t rcar_sip_handler(unsigned int smc_fid,
 		/* Return the number of function IDs */
 		SMC_RET1(handle, RCAR_SIP_SVC_FUNCTION_NUM);
 
+	case RCAR_SIP_SVC_MBOX_TRIGGER:
+                ret = rcar_trigger_scmi(SMC_GET_GP(handle, CTX_GPREG_X7));
+		SMC_RET1(handle, ret);
+
 	case RCAR_SIP_SVC_UID:
 		/* Return UID to the caller */
 		SMC_UUID_RET(handle, rcar_sip_svc_uid);
@@ -58,6 +68,6 @@ DECLARE_RT_SVC(
 	(uint8_t)OEN_SIP_START,
 	(uint8_t)OEN_SIP_END,
 	(uint8_t)SMC_TYPE_FAST,
-	NULL,
+	rcar_sip_setup,
 	rcar_sip_handler
 );
-- 
2.25.1

